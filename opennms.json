  {
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "AWS CloudFormation Sample Template VPC_with_PublicIPs_And_DNS: Sample template showing how to create a VPC with DNS and Public IPs enabled. You will be billed for the AWS resources used if you create a stack from this template.",

    "Parameters" : {

      "KeyName" : {
        "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
        "Type" : "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
      },

      "SSHLocation" : {
        "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
        "Type" : "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default" : "0.0.0.0/0",
        "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
      },

      "EC2InstanceType" : {
        "Description" : "EC2 instance type",
        "Type" : "String",
        "Default" : "t2.small",
        "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
  ,
        "ConstraintDescription" : "must be a valid EC2 instance type."
      },

      "MinionCount" : {
        "Description" : "Number of EC2 instances to launch for the Minion",
        "Type" : "Number",
        "Default" : "2"
      },
      "KafkaCount" : {
        "Description" : "Number of EC2 instances to launch for Kafka cluster",
        "Type" : "Number",
        "Default" : "2"
      },
      "ElasticCount" : {
        "Description" : "Number of EC2 instances to launch for Elastic cluster",
        "Type" : "Number",
        "Default" : "2"
      }
    },

    "Mappings" : {
      "SubnetConfig" : {
        "VPC"     : { "CIDR" : "10.0.0.0/16" },
        "Public"  : { "CIDR" : "10.0.0.0/24" }
      },
      "AWSInstanceType2Arch" : {
        "t1.micro"    : { "Arch" : "PV64"   },
        "t2.nano"     : { "Arch" : "HVM64"  },
        "t2.micro"    : { "Arch" : "HVM64"  },
        "t2.small"    : { "Arch" : "HVM64"  },
        "t2.medium"   : { "Arch" : "HVM64"  },
        "t2.large"    : { "Arch" : "HVM64"  },
        "m1.small"    : { "Arch" : "PV64"   },
        "m1.medium"   : { "Arch" : "PV64"   },
        "m1.large"    : { "Arch" : "PV64"   },
        "m1.xlarge"   : { "Arch" : "PV64"   },
        "m2.xlarge"   : { "Arch" : "PV64"   },
        "m2.2xlarge"  : { "Arch" : "PV64"   },
        "m2.4xlarge"  : { "Arch" : "PV64"   },
        "m3.medium"   : { "Arch" : "HVM64"  },
        "m3.large"    : { "Arch" : "HVM64"  },
        "m3.xlarge"   : { "Arch" : "HVM64"  },
        "m3.2xlarge"  : { "Arch" : "HVM64"  },
        "m4.large"    : { "Arch" : "HVM64"  },
        "m4.xlarge"   : { "Arch" : "HVM64"  },
        "m4.2xlarge"  : { "Arch" : "HVM64"  },
        "m4.4xlarge"  : { "Arch" : "HVM64"  },
        "m4.10xlarge" : { "Arch" : "HVM64"  },
        "c1.medium"   : { "Arch" : "PV64"   },
        "c1.xlarge"   : { "Arch" : "PV64"   },
        "c3.large"    : { "Arch" : "HVM64"  },
        "c3.xlarge"   : { "Arch" : "HVM64"  },
        "c3.2xlarge"  : { "Arch" : "HVM64"  },
        "c3.4xlarge"  : { "Arch" : "HVM64"  },
        "c3.8xlarge"  : { "Arch" : "HVM64"  },
        "c4.large"    : { "Arch" : "HVM64"  },
        "c4.xlarge"   : { "Arch" : "HVM64"  },
        "c4.2xlarge"  : { "Arch" : "HVM64"  },
        "c4.4xlarge"  : { "Arch" : "HVM64"  },
        "c4.8xlarge"  : { "Arch" : "HVM64"  },
        "g2.2xlarge"  : { "Arch" : "HVMG2"  },
        "g2.8xlarge"  : { "Arch" : "HVMG2"  },
        "r3.large"    : { "Arch" : "HVM64"  },
        "r3.xlarge"   : { "Arch" : "HVM64"  },
        "r3.2xlarge"  : { "Arch" : "HVM64"  },
        "r3.4xlarge"  : { "Arch" : "HVM64"  },
        "r3.8xlarge"  : { "Arch" : "HVM64"  },
        "i2.xlarge"   : { "Arch" : "HVM64"  },
        "i2.2xlarge"  : { "Arch" : "HVM64"  },
        "i2.4xlarge"  : { "Arch" : "HVM64"  },
        "i2.8xlarge"  : { "Arch" : "HVM64"  },
        "d2.xlarge"   : { "Arch" : "HVM64"  },
        "d2.2xlarge"  : { "Arch" : "HVM64"  },
        "d2.4xlarge"  : { "Arch" : "HVM64"  },
        "d2.8xlarge"  : { "Arch" : "HVM64"  },
        "hi1.4xlarge" : { "Arch" : "HVM64"  },
        "hs1.8xlarge" : { "Arch" : "HVM64"  },
        "cr1.8xlarge" : { "Arch" : "HVM64"  },
        "cc2.8xlarge" : { "Arch" : "HVM64"  }
      },

      "AWSInstanceType2NATArch" : {
        "t1.micro"    : { "Arch" : "NATPV64"   },
        "t2.nano"     : { "Arch" : "NATHVM64"  },
        "t2.micro"    : { "Arch" : "NATHVM64"  },
        "t2.small"    : { "Arch" : "NATHVM64"  },
        "t2.medium"   : { "Arch" : "NATHVM64"  },
        "t2.large"    : { "Arch" : "NATHVM64"  },
        "m1.small"    : { "Arch" : "NATPV64"   },
        "m1.medium"   : { "Arch" : "NATPV64"   },
        "m1.large"    : { "Arch" : "NATPV64"   },
        "m1.xlarge"   : { "Arch" : "NATPV64"   },
        "m2.xlarge"   : { "Arch" : "NATPV64"   },
        "m2.2xlarge"  : { "Arch" : "NATPV64"   },
        "m2.4xlarge"  : { "Arch" : "NATPV64"   },
        "m3.medium"   : { "Arch" : "NATHVM64"  },
        "m3.large"    : { "Arch" : "NATHVM64"  },
        "m3.xlarge"   : { "Arch" : "NATHVM64"  },
        "m3.2xlarge"  : { "Arch" : "NATHVM64"  },
        "m4.large"    : { "Arch" : "NATHVM64"  },
        "m4.xlarge"   : { "Arch" : "NATHVM64"  },
        "m4.2xlarge"  : { "Arch" : "NATHVM64"  },
        "m4.4xlarge"  : { "Arch" : "NATHVM64"  },
        "m4.10xlarge" : { "Arch" : "NATHVM64"  },
        "c1.medium"   : { "Arch" : "NATPV64"   },
        "c1.xlarge"   : { "Arch" : "NATPV64"   },
        "c3.large"    : { "Arch" : "NATHVM64"  },
        "c3.xlarge"   : { "Arch" : "NATHVM64"  },
        "c3.2xlarge"  : { "Arch" : "NATHVM64"  },
        "c3.4xlarge"  : { "Arch" : "NATHVM64"  },
        "c3.8xlarge"  : { "Arch" : "NATHVM64"  },
        "c4.large"    : { "Arch" : "NATHVM64"  },
        "c4.xlarge"   : { "Arch" : "NATHVM64"  },
        "c4.2xlarge"  : { "Arch" : "NATHVM64"  },
        "c4.4xlarge"  : { "Arch" : "NATHVM64"  },
        "c4.8xlarge"  : { "Arch" : "NATHVM64"  },
        "g2.2xlarge"  : { "Arch" : "NATHVMG2"  },
        "g2.8xlarge"  : { "Arch" : "NATHVMG2"  },
        "r3.large"    : { "Arch" : "NATHVM64"  },
        "r3.xlarge"   : { "Arch" : "NATHVM64"  },
        "r3.2xlarge"  : { "Arch" : "NATHVM64"  },
        "r3.4xlarge"  : { "Arch" : "NATHVM64"  },
        "r3.8xlarge"  : { "Arch" : "NATHVM64"  },
        "i2.xlarge"   : { "Arch" : "NATHVM64"  },
        "i2.2xlarge"  : { "Arch" : "NATHVM64"  },
        "i2.4xlarge"  : { "Arch" : "NATHVM64"  },
        "i2.8xlarge"  : { "Arch" : "NATHVM64"  },
        "d2.xlarge"   : { "Arch" : "NATHVM64"  },
        "d2.2xlarge"  : { "Arch" : "NATHVM64"  },
        "d2.4xlarge"  : { "Arch" : "NATHVM64"  },
        "d2.8xlarge"  : { "Arch" : "NATHVM64"  },
        "hi1.4xlarge" : { "Arch" : "NATHVM64"  },
        "hs1.8xlarge" : { "Arch" : "NATHVM64"  },
        "cr1.8xlarge" : { "Arch" : "NATHVM64"  },
        "cc2.8xlarge" : { "Arch" : "NATHVM64"  }
      }
  ,
      "AWSRegionArch2AMI" : {
        "us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-6869aa05", "HVMG2" : "ami-2e5e9c43"},
        "us-west-2"        : {"PV64" : "ami-7f77b31f", "HVM64" : "ami-7172b611", "HVMG2" : "ami-83b770e3"},
        "us-west-1"        : {"PV64" : "ami-a2490dc2", "HVM64" : "ami-31490d51", "HVMG2" : "ami-fd76329d"},
        "eu-west-1"        : {"PV64" : "ami-4cdd453f", "HVM64" : "ami-f9dd458a", "HVMG2" : "ami-b9bd25ca"},
        "eu-central-1"     : {"PV64" : "ami-6527cf0a", "HVM64" : "ami-ea26ce85", "HVMG2" : "ami-7f04ec10"},
        "ap-northeast-1"   : {"PV64" : "ami-3e42b65f", "HVM64" : "ami-374db956", "HVMG2" : "ami-e0ee1981"},
        "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-2b408b45", "HVMG2" : "NOT_SUPPORTED"},
        "ap-southeast-1"   : {"PV64" : "ami-df9e4cbc", "HVM64" : "ami-a59b49c6", "HVMG2" : "ami-0cb5676f"},
        "ap-southeast-2"   : {"PV64" : "ami-63351d00", "HVM64" : "ami-dc361ebf", "HVMG2" : "ami-a71c34c4"},
        "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-ffbdd790", "HVMG2" : "ami-f5b2d89a"},
        "sa-east-1"        : {"PV64" : "ami-1ad34676", "HVM64" : "ami-6dd04501", "HVMG2" : "NOT_SUPPORTED"},
        "cn-north-1"       : {"PV64" : "ami-77559f1a", "HVM64" : "ami-8e6aa0e3", "HVMG2" : "NOT_SUPPORTED"}
      }

    },

    "Resources" : {

      "VPC" : {
        "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "EnableDnsSupport" : "true",
          "EnableDnsHostnames" : "true",
          "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },

      "PublicSubnet" : {
        "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },

      "InternetGateway" : {
        "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },

      "GatewayToInternet" : {
         "Type" : "AWS::EC2::VPCGatewayAttachment",
         "Properties" : {
           "VpcId" : { "Ref" : "VPC" },
           "InternetGatewayId" : { "Ref" : "InternetGateway" }
         }
      },

      "PublicRouteTable" : {
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },

      "PublicRoute" : {
        "Type" : "AWS::EC2::Route",
        "DependsOn" : "GatewayToInternet",
        "Properties" : {
          "RouteTableId" : { "Ref" : "PublicRouteTable" },
          "DestinationCidrBlock" : "0.0.0.0/0",
          "GatewayId" : { "Ref" : "InternetGateway" }
        }
      },

      "PublicSubnetRouteTableAssociation" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "PublicSubnet" },
          "RouteTableId" : { "Ref" : "PublicRouteTable" }
        }
      },

      "PublicNetworkAcl" : {
        "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },

      "InboundHTTPPublicNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "80", "To" : "80" }
        }
      },

      "InboundHTTPSPublicNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "101",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "443", "To" : "443" }
        }
      },

      "InboundSSHPublicNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "102",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : { "Ref" : "SSHLocation" },
          "PortRange" : { "From" : "22", "To" : "22" }
        }
      },

      "InboundEphemeralPublicNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "103",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "1024", "To" : "65535" }
        }
      },

      "OutboundPublicNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "true",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "0", "To" : "65535" }
        }
      },

      "PublicSubnetNetworkAclAssociation" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "PublicSubnet" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },

      "LoadGeneratorEC2Host" : {
        "Type" : "AWS::EC2::Instance",
        "DependsOn" : "GatewayToInternet",
        "Properties" : {
          "InstanceType" : { "Ref" : "EC2InstanceType" },
          "KeyName"  : { "Ref" : "KeyName" },
          "ImageId"  : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                           { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "EC2InstanceType" }, "Arch" ] } ] },
          "NetworkInterfaces" : [{
            "GroupSet"                 : [{ "Ref" : "EC2SecurityGroup" }],
            "AssociatePublicIpAddress" : "true",
            "DeviceIndex"              : "0",
            "DeleteOnTermination"      : "true",
            "SubnetId"                 : { "Ref" : "PublicSubnet" }
          }],
          "Tags" : [
            { "Key" : "MinionLabInstanceType", "Value" : "loadgen" },
            { "Key" : "Name", "Value" : "loadgen" }
          ]
        }
      },

      "UDPLoadBalancerEC2Host" : {
        "Type" : "AWS::EC2::Instance",
        "DependsOn" : "GatewayToInternet",
        "Properties" : {
          "InstanceType" : { "Ref" : "EC2InstanceType" },
          "KeyName"  : { "Ref" : "KeyName" },
          "ImageId"  : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                           { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "EC2InstanceType" }, "Arch" ] } ] },
          "NetworkInterfaces" : [{
            "GroupSet"                 : [{ "Ref" : "EC2SecurityGroup" }],
            "AssociatePublicIpAddress" : "true",
            "DeviceIndex"              : "0",
            "DeleteOnTermination"      : "true",
            "SubnetId"                 : { "Ref" : "PublicSubnet" }
          }],
          "Tags" : [
            { "Key" : "MinionLabInstanceType", "Value" : "loadbalancer" },
            { "Key" : "Name", "Value" : "loadbalancer" }
          ]
        }
      },

      "PostgreSQLEC2Host" : {
        "Type" : "AWS::EC2::Instance",
        "DependsOn" : "GatewayToInternet",
        "Properties" : {
          "InstanceType" : { "Ref" : "EC2InstanceType" },
          "KeyName"  : { "Ref" : "KeyName" },
          "ImageId"  : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                           { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "EC2InstanceType" }, "Arch" ] } ] },
          "NetworkInterfaces" : [{
            "GroupSet"                 : [{ "Ref" : "EC2SecurityGroup" }],
            "AssociatePublicIpAddress" : "true",
            "DeviceIndex"              : "0",
            "DeleteOnTermination"      : "true",
            "SubnetId"                 : { "Ref" : "PublicSubnet" }
          }],
          "Tags" : [
            { "Key" : "MinionLabInstanceType", "Value" : "postgres" },
            { "Key" : "Name", "Value" : "postgres" }
          ]
        }
      },

      "OpenNMSEC2Host" : {
        "Type" : "AWS::EC2::Instance",
        "DependsOn" : "GatewayToInternet",
        "Properties" : {
          "InstanceType" : { "Ref" : "EC2InstanceType" },
          "KeyName"  : { "Ref" : "KeyName" },
          "ImageId"  : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                           { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "EC2InstanceType" }, "Arch" ] } ] },
          "NetworkInterfaces" : [{
            "GroupSet"                 : [{ "Ref" : "EC2SecurityGroup" }],
            "AssociatePublicIpAddress" : "true",
            "DeviceIndex"              : "0",
            "DeleteOnTermination"      : "true",
            "SubnetId"                 : { "Ref" : "PublicSubnet" }
          }],
          "Tags" : [
            { "Key" : "MinionLabInstanceType", "Value" : "opennms" },
            { "Key" : "Name", "Value" : "opennms" }
          ]
        }
      },

      "ZookeeperEC2Host" : {
        "Type" : "AWS::EC2::Instance",
        "DependsOn" : "GatewayToInternet",
        "Properties" : {
          "InstanceType" : { "Ref" : "EC2InstanceType" },
          "KeyName"  : { "Ref" : "KeyName" },
          "ImageId"  : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                           { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "EC2InstanceType" }, "Arch" ] } ] },
          "NetworkInterfaces" : [{
            "GroupSet"                 : [{ "Ref" : "EC2SecurityGroup" }],
            "AssociatePublicIpAddress" : "true",
            "DeviceIndex"              : "0",
            "DeleteOnTermination"      : "true",
            "SubnetId"                 : { "Ref" : "PublicSubnet" }
          }],
          "Tags" : [
            { "Key" : "MinionLabInstanceType", "Value" : "zookeeper" },
            { "Key" : "Name", "Value" : "zookeeper" }
          ]
        }
      },

      "EC2SecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Enable access to the EC2 host",
          "VpcId" : { "Ref" : "VPC" },
          "SecurityGroupIngress" : [ {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "SSHLocation" }
          }, {
            "IpProtocol" : "tcp",
            "FromPort" : "8980",
            "ToPort" : "8980",
            "CidrIp" : { "Ref" : "SSHLocation" }
          }, {
            "IpProtocol" : "udp",
            "FromPort" : "1162",
            "ToPort" : "1162",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}
          }, {
            "IpProtocol" : "udp",
            "FromPort" : "1514",
            "ToPort" : "1514",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}
          }, {
            "IpProtocol" : "tcp",
            "FromPort" : "5432",
            "ToPort" : "5432",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}
          }, {
            "IpProtocol" : "tcp",
            "FromPort" : "61616",
            "ToPort" : "61616",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}
          }, {
            "IpProtocol" : "tcp",
            "FromPort" : "2181",
            "ToPort" : "2181",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}
          }, {
            "IpProtocol" : "tcp",
            "FromPort" : "9092",
            "ToPort" : "9092",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}
          }, {
            "IpProtocol" : "udp",
            "FromPort" : "9092",
            "ToPort" : "9092",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}
          }, {
            "IpProtocol" : "tcp",
            "FromPort" : "9200",
            "ToPort" : "9200",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}
          }, {
            "IpProtocol" : "tcp",
            "FromPort" : "9300",
            "ToPort" : "9300",
            "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}
          }]
        }
      },

      "MinionFleet" : {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "DependsOn" : "PublicRoute",
        "Properties" : {
          "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PublicSubnet", "AvailabilityZone" ] }],
          "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet" }],
          "LaunchConfigurationName" : { "Ref" : "MinionLaunchConfig"  },
          "MinSize" : "1",
          "MaxSize" : "10",
          "DesiredCapacity" : { "Ref" : "MinionCount" },
          "Tags" : [
            { "Key" : "Network", "Value" : "Public", "PropagateAtLaunch" : "true" },
            { "Key": "MinionLabInstanceType", "Value": "minion", "PropagateAtLaunch" : "true" }
          ]
        },
        "CreationPolicy" : {
          "ResourceSignal" : {
            "Timeout" : "PT45M",
            "Count"   : { "Ref" : "MinionCount" }
          }
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MinInstancesInService": "1",
            "MaxBatchSize": "1",
            "PauseTime" : "PT15M",
            "WaitOnResourceSignals": "true"
          }
        }
      },

      "MinionLaunchConfig"  : {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "config" : {

              "files" : {
                "/etc/cfn/cfn-hup.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[main]\n",
                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                    "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]},
                  "mode"    : "000400",
                  "owner"   : "root",
                  "group"   : "root"
                },

                "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                  "content": { "Fn::Join" : ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.WebServerLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource MinionLaunchConfig ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    "runas=root\n"
                  ]]}
                }
              },

              "services" : {
                "sysvinit" : {
                  "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                }
              }
            }
          }
        },
        "Properties" : {
          "ImageId"        : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "EC2InstanceType" }, "Arch" ] } ] },
          "SecurityGroups" : [ { "Ref" : "EC2SecurityGroup" } ],
          "InstanceType"   : { "Ref" : "EC2InstanceType" },
          "KeyName"        : { "Ref" : "KeyName" },
          "AssociatePublicIpAddress" : "true",
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -xe\n",
            "yum update -y aws-cfn-bootstrap\n",

            "# Install the sample application\n",
            "/opt/aws/bin/cfn-init -v ",
            "    --stack ", { "Ref" : "AWS::StackId" },
            "    --resource MinionLaunchConfig ",
            "    --region ", { "Ref" : "AWS::Region" }, "\n",

            "# Signal copletion\n",
            "/opt/aws/bin/cfn-signal -e $? ",
            "    --stack ", { "Ref" : "AWS::StackId" },
            "    --resource MinionFleet ",
            "    --region ", { "Ref" : "AWS::Region" }, "\n"
          ]]}}
        }
      },

      "KafkaFleet" : {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "DependsOn" : "PublicRoute",
        "Properties" : {
          "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PublicSubnet", "AvailabilityZone" ] }],
          "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet" }],
          "LaunchConfigurationName" : { "Ref" : "KafkaLaunchConfig"  },
          "MinSize" : "1",
          "MaxSize" : "10",
          "DesiredCapacity" : { "Ref" : "KafkaCount" },
          "Tags" : [
            { "Key" : "Network", "Value" : "Public", "PropagateAtLaunch" : "true" },
            { "Key": "MinionLabInstanceType", "Value": "kafka", "PropagateAtLaunch" : "true" }
          ]
        },
        "CreationPolicy" : {
          "ResourceSignal" : {
            "Timeout" : "PT45M",
            "Count"   : { "Ref" : "KafkaCount" }
          }
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MinInstancesInService": "1",
            "MaxBatchSize": "1",
            "PauseTime" : "PT15M",
            "WaitOnResourceSignals": "true"
          }
        }
      },

      "KafkaLaunchConfig"  : {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "config" : {

              "files" : {
                "/etc/cfn/cfn-hup.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[main]\n",
                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                    "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]},
                  "mode"    : "000400",
                  "owner"   : "root",
                  "group"   : "root"
                },

                "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                  "content": { "Fn::Join" : ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.WebServerLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource KafkaLaunchConfig ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    "runas=root\n"
                  ]]}
                }
              },

              "services" : {
                "sysvinit" : {
                  "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                }
              }
            }
          }
        },
        "Properties" : {
          "ImageId"        : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "EC2InstanceType" }, "Arch" ] } ] },
          "SecurityGroups" : [ { "Ref" : "EC2SecurityGroup" } ],
          "InstanceType"   : { "Ref" : "EC2InstanceType" },
          "KeyName"        : { "Ref" : "KeyName" },
          "AssociatePublicIpAddress" : "true",
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -xe\n",
            "yum update -y aws-cfn-bootstrap\n",

            "# Install the sample application\n",
            "/opt/aws/bin/cfn-init -v ",
            "    --stack ", { "Ref" : "AWS::StackId" },
            "    --resource KafkaLaunchConfig ",
            "    --region ", { "Ref" : "AWS::Region" }, "\n",

            "# Signal copletion\n",
            "/opt/aws/bin/cfn-signal -e $? ",
            "    --stack ", { "Ref" : "AWS::StackId" },
            "    --resource KafkaFleet ",
            "    --region ", { "Ref" : "AWS::Region" }, "\n"
          ]]}}
        }
      },
    
      "ElasticFleet" : {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "DependsOn" : "PublicRoute",
        "Properties" : {
          "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PublicSubnet", "AvailabilityZone" ] }],
          "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet" }],
          "LaunchConfigurationName" : { "Ref" : "ElasticLaunchConfig"  },
          "MinSize" : "1",
          "MaxSize" : "10",
          "DesiredCapacity" : { "Ref" : "ElasticCount" },
          "Tags" : [
            { "Key" : "Network", "Value" : "Public", "PropagateAtLaunch" : "true" },
            { "Key": "MinionLabInstanceType", "Value": "elastic", "PropagateAtLaunch" : "true" }
          ]
        },
        "CreationPolicy" : {
          "ResourceSignal" : {
            "Timeout" : "PT45M",
            "Count"   : { "Ref" : "ElasticCount" }
          }
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MinInstancesInService": "1",
            "MaxBatchSize": "1",
            "PauseTime" : "PT15M",
            "WaitOnResourceSignals": "true"
          }
        }
      },

      "ElasticLaunchConfig"  : {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "config" : {

              "files" : {
                "/etc/cfn/cfn-hup.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[main]\n",
                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                    "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]},
                  "mode"    : "000400",
                  "owner"   : "root",
                  "group"   : "root"
                },

                "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                  "content": { "Fn::Join" : ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.WebServerLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource ElasticLaunchConfig ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    "runas=root\n"
                  ]]}
                }
              },

              "services" : {
                "sysvinit" : {
                  "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                }
              }
            }
          }
        },
        "Properties" : {
          "ImageId"        : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "EC2InstanceType" }, "Arch" ] } ] },
          "SecurityGroups" : [ { "Ref" : "EC2SecurityGroup" } ],
          "InstanceType"   : { "Ref" : "EC2InstanceType" },
          "KeyName"        : { "Ref" : "KeyName" },
          "AssociatePublicIpAddress" : "true",
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -xe\n",
            "yum update -y aws-cfn-bootstrap\n",

            "# Install the sample application\n",
            "/opt/aws/bin/cfn-init -v ",
            "    --stack ", { "Ref" : "AWS::StackId" },
            "    --resource ElasticLaunchConfig ",
            "    --region ", { "Ref" : "AWS::Region" }, "\n",

            "# Signal copletion\n",
            "/opt/aws/bin/cfn-signal -e $? ",
            "    --stack ", { "Ref" : "AWS::StackId" },
            "    --resource ElasticFleet ",
            "    --region ", { "Ref" : "AWS::Region" }, "\n"
          ]]}}
        }
      }
    },

    "Outputs" : {
      "VPCId" : {
        "Description" : "VPCId of the newly created VPC",
        "Value" :  { "Ref" : "VPC" }
      },
      "PublicSubnet" : {
        "Description" : "SubnetId of the public subnet",
        "Value" :  { "Ref" : "PublicSubnet" }
      },
      "DNSName" : {
        "Description" : "DNS Name of the EC2 host",
        "Value" :  { "Fn::GetAtt" : ["LoadGeneratorEC2Host", "PublicDnsName"] }
      }
    }
  }
